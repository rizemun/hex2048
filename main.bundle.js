(()=>{"use strict";var e={348:(e,t,n)=>{n.d(t,{Z:()=>a});var o=n(15),r=n.n(o),s=n(645),i=n.n(s)()(r());i.push([e.id,"body {\n  margin: 0;\n  padding: 0;\n  background-color: #80cbc4;\n  height: 100vh;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n}\n.hexagon {\n  position: relative;\n}\n.hexagon::before,\n.hexagon::after {\n  content: '';\n  position: absolute;\n  right: 100%;\n  top: 50%;\n  width: 50%;\n  height: 0;\n  z-index: -1;\n  padding-bottom: 50%;\n  background-color: inherit;\n}\n.hexagon::before {\n  right: 100%;\n  transform: translate(50%, -50%) scale(1.42, 2.45) rotate(45deg);\n}\n.hexagon::after {\n  left: 100%;\n  transform: translate(-50%, -50%) scale(1.42, 2.45) rotate(45deg);\n}\n.hexagon_outer {\n  background: #00675b;\n}\n.hexagon_outer:hover {\n  background-color: #64d8cb;\n}\n.hexagon_inner {\n  position: absolute;\n  left: 50%;\n  top: 50%;\n  width: 100%;\n  height: 100%;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  transform: translate(-50%, -50%) scale(0.95);\n  background-color: #009688;\n  z-index: 2;\n  pointer-events: none;\n  font-family: 'Roboto', Arial, sans-serif;\n  font-size: 26px;\n}\n.field {\n  position: relative;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n}\n.field__column {\n  height: 100%;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n}\n","",{version:3,sources:["webpack://./src/styles.less"],names:[],mappings:"AAEA;EACE,SAAA;EACA,UAAA;EACA,yBAAA;EACA,aAAA;EACA,aAAA;EACA,uBAAA;EACA,mBAAA;AADF;AAIA;EACE,kBAAA;AAFF;AAIE;;EAEE,WAAA;EACA,kBAAA;EACA,WAAA;EACA,QAAA;EACA,UAAA;EACA,SAAA;EACA,WAAA;EACA,mBAAA;EACA,yBAAA;AAFJ;AAKE;EACE,WAAA;EACA,+DAAA;AAHJ;AAME;EACE,UAAA;EACA,gEAAA;AAJJ;AAOE;EACE,mBAAA;AALJ;AAOI;EACE,yBAAA;AALN;AASE;EACE,kBAAA;EACA,SAAA;EACA,QAAA;EACA,WAAA;EACA,YAAA;EACA,aAAA;EACA,uBAAA;EACA,mBAAA;EACA,4CAAA;EACA,yBAAA;EACA,UAAA;EACA,oBAAA;EACA,wCAAA;EACA,eAAA;AAPJ;AAWA;EACE,kBAAA;EACA,aAAA;EACA,uBAAA;EACA,mBAAA;AATF;AAWE;EACE,YAAA;EACA,aAAA;EACA,sBAAA;EACA,uBAAA;EACA,mBAAA;AATJ",sourcesContent:["@bgColor: #80cbc4;\n\nbody {\n  margin: 0;\n  padding: 0;\n  background-color: @bgColor;\n  height: 100vh;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n}\n\n.hexagon {\n  position: relative;\n\n  &::before,\n  &::after {\n    content: '';\n    position: absolute;\n    right: 100%;\n    top: 50%;\n    width: 50%;\n    height: 0;\n    z-index: -1;\n    padding-bottom: 50%;\n    background-color: inherit;\n  }\n\n  &::before {\n    right: 100%;\n    transform: translate(50%,-50%) scale(1.42, 2.45) rotate(45deg);\n  }\n\n  &::after {\n    left: 100%;\n    transform: translate(-50%,-50%) scale(1.42, 2.45) rotate(45deg);\n  }\n\n  &_outer {\n    background: #00675b;\n\n    &:hover {\n      background-color: #64d8cb;\n    }\n  }\n\n  &_inner {\n    position: absolute;\n    left: 50%;\n    top: 50%;\n    width: 100%;\n    height: 100%;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    transform: translate(-50%, -50%) scale(.95);\n    background-color: #009688;\n    z-index: 2;\n    pointer-events: none;\n    font-family: 'Roboto', Arial, sans-serif;\n    font-size: 26px;\n  }\n}\n\n.field {\n  position: relative;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n\n  &__column {\n    height: 100%;\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    align-items: center;\n  }\n}\n"],sourceRoot:""}]);const a=i},645:e=>{e.exports=function(e){var t=[];return t.toString=function(){return this.map((function(t){var n=e(t);return t[2]?"@media ".concat(t[2]," {").concat(n,"}"):n})).join("")},t.i=function(e,n,o){"string"==typeof e&&(e=[[null,e,""]]);var r={};if(o)for(var s=0;s<this.length;s++){var i=this[s][0];null!=i&&(r[i]=!0)}for(var a=0;a<e.length;a++){var l=[].concat(e[a]);o&&r[l[0]]||(n&&(l[2]?l[2]="".concat(n," and ").concat(l[2]):l[2]=n),t.push(l))}},t}},15:e=>{function t(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,o=new Array(t);n<t;n++)o[n]=e[n];return o}e.exports=function(e){var n,o,r=(o=4,function(e){if(Array.isArray(e))return e}(n=e)||function(e,t){if("undefined"!=typeof Symbol&&Symbol.iterator in Object(e)){var n=[],o=!0,r=!1,s=void 0;try{for(var i,a=e[Symbol.iterator]();!(o=(i=a.next()).done)&&(n.push(i.value),!t||n.length!==t);o=!0);}catch(e){r=!0,s=e}finally{try{o||null==a.return||a.return()}finally{if(r)throw s}}return n}}(n,o)||function(e,n){if(e){if("string"==typeof e)return t(e,n);var o=Object.prototype.toString.call(e).slice(8,-1);return"Object"===o&&e.constructor&&(o=e.constructor.name),"Map"===o||"Set"===o?Array.from(e):"Arguments"===o||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(o)?t(e,n):void 0}}(n,o)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),s=r[1],i=r[3];if("function"==typeof btoa){var a=btoa(unescape(encodeURIComponent(JSON.stringify(i)))),l="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(a),c="/*# ".concat(l," */"),u=i.sources.map((function(e){return"/*# sourceURL=".concat(i.sourceRoot||"").concat(e," */")}));return[s].concat(u).concat([c]).join("\n")}return[s].join("\n")}},379:(e,t,n)=>{var o,r=function(){var e={};return function(t){if(void 0===e[t]){var n=document.querySelector(t);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(e){n=null}e[t]=n}return e[t]}}(),s=[];function i(e){for(var t=-1,n=0;n<s.length;n++)if(s[n].identifier===e){t=n;break}return t}function a(e,t){for(var n={},o=[],r=0;r<e.length;r++){var a=e[r],l=t.base?a[0]+t.base:a[0],c=n[l]||0,u="".concat(l," ").concat(c);n[l]=c+1;var A=i(u),h={css:a[1],media:a[2],sourceMap:a[3]};-1!==A?(s[A].references++,s[A].updater(h)):s.push({identifier:u,updater:g(h,t),references:1}),o.push(u)}return o}function l(e){var t=document.createElement("style"),o=e.attributes||{};if(void 0===o.nonce){var s=n.nc;s&&(o.nonce=s)}if(Object.keys(o).forEach((function(e){t.setAttribute(e,o[e])})),"function"==typeof e.insert)e.insert(t);else{var i=r(e.insert||"head");if(!i)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");i.appendChild(t)}return t}var c,u=(c=[],function(e,t){return c[e]=t,c.filter(Boolean).join("\n")});function A(e,t,n,o){var r=n?"":o.media?"@media ".concat(o.media," {").concat(o.css,"}"):o.css;if(e.styleSheet)e.styleSheet.cssText=u(t,r);else{var s=document.createTextNode(r),i=e.childNodes;i[t]&&e.removeChild(i[t]),i.length?e.insertBefore(s,i[t]):e.appendChild(s)}}function h(e,t,n){var o=n.css,r=n.media,s=n.sourceMap;if(r?e.setAttribute("media",r):e.removeAttribute("media"),s&&"undefined"!=typeof btoa&&(o+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(s))))," */")),e.styleSheet)e.styleSheet.cssText=o;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(o))}}var d=null,f=0;function g(e,t){var n,o,r;if(t.singleton){var s=f++;n=d||(d=l(t)),o=A.bind(null,n,s,!1),r=A.bind(null,n,s,!0)}else n=l(t),o=h.bind(null,n,t),r=function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(n)};return o(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap)return;o(e=t)}else r()}}e.exports=function(e,t){(t=t||{}).singleton||"boolean"==typeof t.singleton||(t.singleton=(void 0===o&&(o=Boolean(window&&document&&document.all&&!window.atob)),o));var n=a(e=e||[],t);return function(e){if(e=e||[],"[object Array]"===Object.prototype.toString.call(e)){for(var o=0;o<n.length;o++){var r=i(n[o]);s[r].references--}for(var l=a(e,t),c=0;c<n.length;c++){var u=i(n[c]);0===s[u].references&&(s[u].updater(),s.splice(u,1))}n=l}}}}},t={};function n(o){var r=t[o];if(void 0!==r)return r.exports;var s=t[o]={id:o,exports:{}};return e[o](s,s.exports,n),s.exports}n.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return n.d(t,{a:t}),t},n.d=(e,t)=>{for(var o in t)n.o(t,o)&&!n.o(e,o)&&Object.defineProperty(e,o,{enumerable:!0,get:t[o]})},n.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),(()=>{var e=n(379),t=n.n(e),o=n(348);t()(o.Z,{insert:"head",singleton:!1}),o.Z.locals;class r{constructor({radius:e,coordinates:t}){this.radius=e,this.coordinates=t,this._neighbours={},this._value=0,this.numbersToUse=[]}get neighbours(){return this._neighbours}set neighbours(e){this._neighbours=e}get value(){return this._value}set value(e){this._value=e,this.drawText(e||"")}drawCoordinates(){this.$innerEl.innerText=`[${this.coordinates.x}:${this.coordinates.y}:${this.coordinates.z}]`}drawText(e){this.$innerEl.innerText=e}render(){return this.$el=document.createElement("div"),this.$el.classList.add("hexagon"),this.$el.classList.add("hexagon_outer"),this.$el.hexagon=this,this.$el.innerHTML='<div class="hexagon hexagon_inner"></div>',this.$innerEl=this.$el.children[0],this.$el}}function s(e,t){return!!e[t]}const i=document.getElementById("field"),a=new class{constructor(e,t,n){this.$el=e,this.size=t,this.tableSize=2*t-1,this.radius=n,this.table={},this.allHexagons=[],this._bindEvents(),this._addStyles()}_bindEvents(){this._onServerResponse=this._onServerResponse.bind(this),document.removeEventListener("serverResponse",this._onServerResponse),document.addEventListener("serverResponse",this._onServerResponse)}_onServerResponse(e){e.detail.forEach((e=>{const{x:t,y:n,z:o}=(r=e,{x:String(r.x),y:String(r.y),z:String(r.z)});var r;this.table[t][n][o].value=e.value}))}_cellExist({x:e,y:t,z:n}){return s(this.table,e)&&s(this.table[e],t)&&s(this.table[e][t],n)}_addCell({x:e,y:t,z:n}){s(this.table,e)||(this.table[e]={}),s(this.table[e],t)||(this.table[e][t]={}),s(this.table[e][t],n)||(this.table[e][t][n]="")}_saveCell(e,t){let{x:n,y:o,z:r}=t;this._cellExist(t)||this._addCell(t),this.table[n][o][r]=e}_getCell({x:e,y:t,z:n}){return this.table[e][t][n]}_findNeighbours(e){const{x:t,y:n,z:o}=function(e){return{x:Number(e.x),y:Number(e.y),z:Number(e.z)}}(e);return[{x:t+1,y:n-1,z:o,direction:"south-east"},{x:t-1,y:n+1,z:o,direction:"north-west"},{x:t,y:n+1,z:o-1,direction:"north"},{x:t,y:n-1,z:o+1,direction:"south"},{x:t+1,y:n,z:o-1,direction:"north-east"},{x:t-1,y:n,z:o+1,direction:"south-west"}].filter(this._cellExist.bind(this)).reduce(((e,t)=>(e[t.direction]=this._getCell(t),e)),{})}_updateNeighbours(e){this._getCell(e).neighbours=this._findNeighbours(e)}_calcHexSizes(){return this.innerRadius=Math.sqrt(3)/2*this.radius,{tallerSize:this.radius,widerSize:2*this.innerRadius}}_createColumnTemplate(e,t){const n=e=>t>0?e-this.size+1:e-t-this.size+1,o=this.radius,s=document.createElement("div");s.classList.add("field__column");for(let a=0;a<e;a++){const e={x:t,y:(i=a,-t-n(i)),z:n(a)},l=new r({radius:o,coordinates:e});s.append(l.render()),this._saveCell(l,e),this.allHexagons.push(l)}var i;return s}_addStyles(){const e=document.getElementById("field-styles"),t=this._calcHexSizes(),n=`.field__column {margin-left: ${this.radius/2}px;}.hexagon_outer {width: ${t.tallerSize}px;height: ${t.widerSize}px;}`;if(e)e.innerText=n;else{const e=document.createElement("style");e.id="field-styles",e.innerText=n,document.head.append(e)}}render(){for(let e=0;e<this.tableSize;e++){const t=this.tableSize-Math.abs(this.size-1-e);this.$el.append(this._createColumnTemplate(t,e-this.size+1))}}updateAllNeighbours(){for(let e in this.table){const t=this.table[e];for(let n in t){const o=t[n];for(let t in o)this._updateNeighbours({x:e,y:n,z:t})}}}_getMovementSource(e){const t=this.size-1,n={"north-west":{x:t,y:-t},north:{z:t,y:-t},"north-east":{x:-t,z:t},"south-west":{x:t,z:-t},south:{y:t,z:-t},"south-east":{x:-t,y:t}}[e];return this.allHexagons.filter((e=>{const t=e.coordinates,{x:o,y:r,z:s}=n;return!(!o||t.x!==o)||!(!r||t.y!==r)||!(!s||t.z!==s)}))}_getMovementDestination(e){const t=this.size-1,n={"north-west":{x:-t,y:t},north:{z:-t,y:t},"north-east":{x:t,z:-t},"south-west":{x:-t,z:t},south:{y:-t,z:t},"south-east":{x:t,y:-t}}[e];return this.allHexagons.filter((e=>{const t=e.coordinates,{x:o,y:r,z:s}=n;return!(!o||t.x!==o)||!(!r||t.y!==r)||!(!s||t.z!==s)}))}_getOpposizeDirection(e){return{"north-west":"south-east",north:"south","north-east":"south-west","south-west":"north-east",south:"north","south-east":"north-west"}[e]}makeStep(e){console.log({direction:e}),this._getMovementSource(e).forEach((t=>{let n=t,o=n.neighbours[e];for(;n;){o=n.neighbours[e];const t=n.value,r=n.numbersToUse;if(t||r.length)o?(o.numbersToUse.push(...r),t&&o.numbersToUse.push(t),n.numbersToUse=[],n.value=0):t&&n.numbersToUse.push(t),n=o;else if(n=o,!n)break}})),this._getMovementDestination(e).forEach((t=>{if(!t.numbersToUse.length)return;const n=t.numbersToUse.reverse().reduce(((e,t,n)=>(e[e.length-1]===t?e[e.length-1]=2*t:e.push(t),e)),[]);t.numbersToUse=[],t.calcuatedRow=n,console.log("%ccalculated: ","color: rebeccapurple; font-style: italic",n);const o=this._getOpposizeDirection(e);t.calcuatedRow.forEach(((r,s)=>{let i=t;for(let e=0;e<s;e++)i=i.neighbours[o];i||(console.log(t),console.log(e),console.log(n)),i.value=r})),t.calcuatedRow=[]}))}get dataToSend(){return JSON.stringify(this.allHexagons.filter((e=>e.value)).map((e=>({x:e.coordinates.x,y:e.coordinates.y,z:e.coordinates.z,value:e.value}))))}}(i,2,50),l=new class{constructor(){this.events={},document.addEventListener("keydown",this.onKeyDownTaskManager.bind(this))}onKeyDownTaskManager(e){this.events[e.code]&&this.events[e.code]()}onKeyDown(e,t){this.events[e]=t}offKeyDown(e){this.events[e]=""}},c=new class{constructor(e){this.url=e}_onResponce(e){const t=new CustomEvent("serverResponse",{detail:e});document.dispatchEvent(t)}getData(e="[]"){fetch(this.url,{method:"post",body:e}).then((e=>e.json())).then(this._onResponce.bind(this))}}("https://68f02c80-3bed-4e10-a747-4ff774ae905a.pub.instances.scw.cloud/2");l.onKeyDown("KeyQ",(()=>{a.makeStep("north-west"),console.log(a.dataToSend)})),l.onKeyDown("KeyW",(()=>{a.makeStep("north"),c.getData(a.dataToSend)})),l.onKeyDown("KeyE",(()=>{a.makeStep("north-east"),c.getData(a.dataToSend)})),l.onKeyDown("KeyA",(()=>{a.makeStep("south-west"),c.getData(a.dataToSend)})),l.onKeyDown("KeyS",(()=>{a.makeStep("south"),c.getData(a.dataToSend)})),l.onKeyDown("KeyD",(()=>{a.makeStep("south-east"),c.getData(a.dataToSend)})),c.getData(),a.render(),a.updateAllNeighbours(),console.log(a.table),console.log(a.allHexagons)})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,