(()=>{"use strict";var e={348:(e,n,t)=>{t.d(n,{Z:()=>a});var r=t(15),o=t.n(r),i=t(645),s=t.n(i)()(o());s.push([e.id,"body {\n  margin: 0;\n  padding: 0;\n  background-color: #80cbc4;\n  height: 100vh;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n}\n.hexagon {\n  position: relative;\n}\n.hexagon::before,\n.hexagon::after {\n  content: '';\n  position: absolute;\n  right: 100%;\n  top: 50%;\n  width: 50%;\n  height: 0;\n  z-index: -1;\n  padding-bottom: 50%;\n  background-color: inherit;\n}\n.hexagon::before {\n  right: 100%;\n  transform: translate(50%, -50%) scale(1.42, 2.45) rotate(45deg);\n}\n.hexagon::after {\n  left: 100%;\n  transform: translate(-50%, -50%) scale(1.42, 2.45) rotate(45deg);\n}\n.hexagon_outer {\n  background: #00675b;\n}\n.hexagon_outer:hover {\n  background-color: #64d8cb;\n}\n.hexagon_inner {\n  position: absolute;\n  left: 50%;\n  top: 50%;\n  width: 100%;\n  height: 100%;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  transform: translate(-50%, -50%) scale(0.95);\n  background-color: #009688;\n  z-index: 2;\n  pointer-events: none;\n  font-family: 'Roboto', Arial, sans-serif;\n  font-size: 26px;\n}\n.field {\n  position: relative;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n}\n.field__column {\n  height: 100%;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n}\n","",{version:3,sources:["webpack://./src/styles.less"],names:[],mappings:"AAEA;EACE,SAAA;EACA,UAAA;EACA,yBAAA;EACA,aAAA;EACA,aAAA;EACA,uBAAA;EACA,mBAAA;AADF;AAIA;EACE,kBAAA;AAFF;AAIE;;EAEE,WAAA;EACA,kBAAA;EACA,WAAA;EACA,QAAA;EACA,UAAA;EACA,SAAA;EACA,WAAA;EACA,mBAAA;EACA,yBAAA;AAFJ;AAKE;EACE,WAAA;EACA,+DAAA;AAHJ;AAME;EACE,UAAA;EACA,gEAAA;AAJJ;AAOE;EACE,mBAAA;AALJ;AAOI;EACE,yBAAA;AALN;AASE;EACE,kBAAA;EACA,SAAA;EACA,QAAA;EACA,WAAA;EACA,YAAA;EACA,aAAA;EACA,uBAAA;EACA,mBAAA;EACA,4CAAA;EACA,yBAAA;EACA,UAAA;EACA,oBAAA;EACA,wCAAA;EACA,eAAA;AAPJ;AAWA;EACE,kBAAA;EACA,aAAA;EACA,uBAAA;EACA,mBAAA;AATF;AAWE;EACE,YAAA;EACA,aAAA;EACA,sBAAA;EACA,uBAAA;EACA,mBAAA;AATJ",sourcesContent:["@bgColor: #80cbc4;\n\nbody {\n  margin: 0;\n  padding: 0;\n  background-color: @bgColor;\n  height: 100vh;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n}\n\n.hexagon {\n  position: relative;\n\n  &::before,\n  &::after {\n    content: '';\n    position: absolute;\n    right: 100%;\n    top: 50%;\n    width: 50%;\n    height: 0;\n    z-index: -1;\n    padding-bottom: 50%;\n    background-color: inherit;\n  }\n\n  &::before {\n    right: 100%;\n    transform: translate(50%,-50%) scale(1.42, 2.45) rotate(45deg);\n  }\n\n  &::after {\n    left: 100%;\n    transform: translate(-50%,-50%) scale(1.42, 2.45) rotate(45deg);\n  }\n\n  &_outer {\n    background: #00675b;\n\n    &:hover {\n      background-color: #64d8cb;\n    }\n  }\n\n  &_inner {\n    position: absolute;\n    left: 50%;\n    top: 50%;\n    width: 100%;\n    height: 100%;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    transform: translate(-50%, -50%) scale(.95);\n    background-color: #009688;\n    z-index: 2;\n    pointer-events: none;\n    font-family: 'Roboto', Arial, sans-serif;\n    font-size: 26px;\n  }\n}\n\n.field {\n  position: relative;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n\n  &__column {\n    height: 100%;\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    align-items: center;\n  }\n}\n"],sourceRoot:""}]);const a=s},645:e=>{e.exports=function(e){var n=[];return n.toString=function(){return this.map((function(n){var t=e(n);return n[2]?"@media ".concat(n[2]," {").concat(t,"}"):t})).join("")},n.i=function(e,t,r){"string"==typeof e&&(e=[[null,e,""]]);var o={};if(r)for(var i=0;i<this.length;i++){var s=this[i][0];null!=s&&(o[s]=!0)}for(var a=0;a<e.length;a++){var c=[].concat(e[a]);r&&o[c[0]]||(t&&(c[2]?c[2]="".concat(t," and ").concat(c[2]):c[2]=t),n.push(c))}},n}},15:e=>{function n(e,n){(null==n||n>e.length)&&(n=e.length);for(var t=0,r=new Array(n);t<n;t++)r[t]=e[t];return r}e.exports=function(e){var t,r,o=(r=4,function(e){if(Array.isArray(e))return e}(t=e)||function(e,n){if("undefined"!=typeof Symbol&&Symbol.iterator in Object(e)){var t=[],r=!0,o=!1,i=void 0;try{for(var s,a=e[Symbol.iterator]();!(r=(s=a.next()).done)&&(t.push(s.value),!n||t.length!==n);r=!0);}catch(e){o=!0,i=e}finally{try{r||null==a.return||a.return()}finally{if(o)throw i}}return t}}(t,r)||function(e,t){if(e){if("string"==typeof e)return n(e,t);var r=Object.prototype.toString.call(e).slice(8,-1);return"Object"===r&&e.constructor&&(r=e.constructor.name),"Map"===r||"Set"===r?Array.from(e):"Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?n(e,t):void 0}}(t,r)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),i=o[1],s=o[3];if("function"==typeof btoa){var a=btoa(unescape(encodeURIComponent(JSON.stringify(s)))),c="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(a),l="/*# ".concat(c," */"),A=s.sources.map((function(e){return"/*# sourceURL=".concat(s.sourceRoot||"").concat(e," */")}));return[i].concat(A).concat([l]).join("\n")}return[i].join("\n")}},379:(e,n,t)=>{var r,o=function(){var e={};return function(n){if(void 0===e[n]){var t=document.querySelector(n);if(window.HTMLIFrameElement&&t instanceof window.HTMLIFrameElement)try{t=t.contentDocument.head}catch(e){t=null}e[n]=t}return e[n]}}(),i=[];function s(e){for(var n=-1,t=0;t<i.length;t++)if(i[t].identifier===e){n=t;break}return n}function a(e,n){for(var t={},r=[],o=0;o<e.length;o++){var a=e[o],c=n.base?a[0]+n.base:a[0],l=t[c]||0,A="".concat(c," ").concat(l);t[c]=l+1;var d=s(A),u={css:a[1],media:a[2],sourceMap:a[3]};-1!==d?(i[d].references++,i[d].updater(u)):i.push({identifier:A,updater:p(u,n),references:1}),r.push(A)}return r}function c(e){var n=document.createElement("style"),r=e.attributes||{};if(void 0===r.nonce){var i=t.nc;i&&(r.nonce=i)}if(Object.keys(r).forEach((function(e){n.setAttribute(e,r[e])})),"function"==typeof e.insert)e.insert(n);else{var s=o(e.insert||"head");if(!s)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");s.appendChild(n)}return n}var l,A=(l=[],function(e,n){return l[e]=n,l.filter(Boolean).join("\n")});function d(e,n,t,r){var o=t?"":r.media?"@media ".concat(r.media," {").concat(r.css,"}"):r.css;if(e.styleSheet)e.styleSheet.cssText=A(n,o);else{var i=document.createTextNode(o),s=e.childNodes;s[n]&&e.removeChild(s[n]),s.length?e.insertBefore(i,s[n]):e.appendChild(i)}}function u(e,n,t){var r=t.css,o=t.media,i=t.sourceMap;if(o?e.setAttribute("media",o):e.removeAttribute("media"),i&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(i))))," */")),e.styleSheet)e.styleSheet.cssText=r;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(r))}}var h=null,f=0;function p(e,n){var t,r,o;if(n.singleton){var i=f++;t=h||(h=c(n)),r=d.bind(null,t,i,!1),o=d.bind(null,t,i,!0)}else t=c(n),r=u.bind(null,t,n),o=function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(t)};return r(e),function(n){if(n){if(n.css===e.css&&n.media===e.media&&n.sourceMap===e.sourceMap)return;r(e=n)}else o()}}e.exports=function(e,n){(n=n||{}).singleton||"boolean"==typeof n.singleton||(n.singleton=(void 0===r&&(r=Boolean(window&&document&&document.all&&!window.atob)),r));var t=a(e=e||[],n);return function(e){if(e=e||[],"[object Array]"===Object.prototype.toString.call(e)){for(var r=0;r<t.length;r++){var o=s(t[r]);i[o].references--}for(var c=a(e,n),l=0;l<t.length;l++){var A=s(t[l]);0===i[A].references&&(i[A].updater(),i.splice(A,1))}t=c}}}}},n={};function t(r){var o=n[r];if(void 0!==o)return o.exports;var i=n[r]={id:r,exports:{}};return e[r](i,i.exports,t),i.exports}t.n=e=>{var n=e&&e.__esModule?()=>e.default:()=>e;return t.d(n,{a:n}),n},t.d=(e,n)=>{for(var r in n)t.o(n,r)&&!t.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:n[r]})},t.o=(e,n)=>Object.prototype.hasOwnProperty.call(e,n),(()=>{var e=t(379),n=t.n(e),r=t(348);n()(r.Z,{insert:"head",singleton:!1}),r.Z.locals;class o{constructor({radius:e,coordinates:n}){this.radius=e,this.coordinates=n,this._neighbours={}}get neighbours(){return this._neighbours}set neighbours(e){this._neighbours=e}drawCoordinates(){this.$innerEl.innerText=`[${this.coordinates.x}:${this.coordinates.y}:${this.coordinates.z}]`}drawText(e){this.$innerEl.innerText=e}render(){return this.$el=document.createElement("div"),this.$el.classList.add("hexagon"),this.$el.classList.add("hexagon_outer"),this.$el.innerHTML='<div class="hexagon hexagon_inner"></div>',this.$innerEl=this.$el.children[0],this.$el}}function i(e,n){return!!e[n]}const s=document.getElementById("field"),a=new class{constructor(e,n,t){this.$el=e,this.size=n,this.tableSize=2*n-1,this.radius=t,this.table={},this._bindEvents(),this._addStyles()}_bindEvents(){this._onServerResponse=this._onServerResponse.bind(this),document.removeEventListener("serverResponse",this._onServerResponse),document.addEventListener("serverResponse",this._onServerResponse)}_onServerResponse(e){e.detail.forEach((e=>{const{x:n,y:t,z:r}=(o=e,{x:String(o.x),y:String(o.y),z:String(o.z)});var o;this.table[n][t][r].drawText(e.value)}))}_cellExist({x:e,y:n,z:t}){return i(this.table,e)&&i(this.table[e],n)&&i(this.table[e][n],t)}_addCell({x:e,y:n,z:t}){i(this.table,e)||(this.table[e]={}),i(this.table[e],n)||(this.table[e][n]={}),i(this.table[e][n],t)||(this.table[e][n][t]="")}_saveCell(e,n){let{x:t,y:r,z:o}=n;this._cellExist(n)||this._addCell(n),this.table[t][r][o]=e}_getCell({x:e,y:n,z:t}){return this.table[e][n][t]}_findNeighbours(e){const{x:n,y:t,z:r}=function(e){return{x:Number(e.x),y:Number(e.y),z:Number(e.z)}}(e);return[{x:n+1,y:t-1,z:r,direction:"south-east"},{x:n-1,y:t+1,z:r,direction:"north-west"},{x:n,y:t+1,z:r-1,direction:"north"},{x:n,y:t-1,z:r+1,direction:"south"},{x:n+1,y:t,z:r-1,direction:"north-east"},{x:n-1,y:t,z:r+1,direction:"south-west"}].filter(this._cellExist.bind(this)).map((e=>({cell:this._getCell(e),direction:e.direction})))}_updateNeighbours(e){this._getCell(e).neighbours=this._findNeighbours(e)}_calcHexSizes(){return this.innerRadius=Math.sqrt(3)/2*this.radius,{tallerSize:this.radius,widerSize:2*this.innerRadius}}_createColumnTemplate(e,n){const t=e=>n>0?e-this.size+1:e-n-this.size+1,r=this.radius,i=document.createElement("div");i.classList.add("field__column");for(let a=0;a<e;a++){const e={x:n,y:(s=a,-n-t(s)),z:t(a)},c=new o({radius:r,coordinates:e});i.append(c.render()),this._saveCell(c,e)}var s;return i}_addStyles(){const e=document.getElementById("field-styles"),n=this._calcHexSizes(),t=`.field__column {margin-left: ${this.radius/2}px;}.hexagon_outer {width: ${n.tallerSize}px;height: ${n.widerSize}px;}`;if(e)e.innerText=t;else{const e=document.createElement("style");e.id="field-styles",e.innerText=t,document.head.append(e)}}render(){for(let e=0;e<this.tableSize;e++){const n=this.tableSize-Math.abs(this.size-1-e);this.$el.append(this._createColumnTemplate(n,e-this.size+1))}}updateAllNeighbours(){for(let e in this.table){const n=this.table[e];for(let t in n){const r=n[t];for(let n in r)this._updateNeighbours({x:e,y:t,z:n})}}}}(s,4,50),c=new class{constructor(){this.events={},document.addEventListener("keydown",this.onKeyDownTaskManager.bind(this))}onKeyDownTaskManager(e){this.events[e.code]&&this.events[e.code]()}onKeyDown(e,n){this.events[e]=n}offKeyDown(e){this.events[e]=""}},l=new class{constructor(e){this.url=e}_onResponce(e){const n=new CustomEvent("serverResponse",{detail:e});document.dispatchEvent(n)}getData(e="[]"){fetch(this.url,{method:"post",body:e}).then((e=>e.json())).then(this._onResponce.bind(this))}}("https://68f02c80-3bed-4e10-a747-4ff774ae905a.pub.instances.scw.cloud/2");c.onKeyDown("KeyQ",(()=>console.log("key Q pressed"))),c.onKeyDown("KeyW",(()=>console.log("key W pressed"))),c.onKeyDown("KeyE",(()=>console.log("key E pressed"))),l.getData(),a.render(),a.updateAllNeighbours(),console.log(a.table)})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,