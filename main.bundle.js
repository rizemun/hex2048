(()=>{"use strict";var e={348:(e,n,t)=>{t.d(n,{Z:()=>s});var o=t(15),a=t.n(o),r=t(645),i=t.n(r)()(a());i.push([e.id,'body {\n  margin: 0;\n  padding: 0;\n  background-color: #80cbc4;\n  height: 100vh;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n}\n.hexagon {\n  position: relative;\n}\n.hexagon::before,\n.hexagon::after {\n  content: \'\';\n  position: absolute;\n  right: 100%;\n  top: 50%;\n  width: 50%;\n  height: 0;\n  z-index: -1;\n  padding-bottom: 50%;\n  background-color: inherit;\n}\n.hexagon::before {\n  right: 100%;\n  transform: translate(50%, -50%) scale(1.42, 2.45) rotate(45deg);\n}\n.hexagon::after {\n  left: 100%;\n  transform: translate(-50%, -50%) scale(1.42, 2.45) rotate(45deg);\n}\n.hexagon_outer {\n  background: #00675b;\n}\n.hexagon_outer:hover {\n  background-color: #64d8cb;\n}\n.hexagon_inner {\n  position: absolute;\n  left: 50%;\n  top: 50%;\n  width: 100%;\n  height: 100%;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  transform: translate(-50%, -50%) scale(0.95);\n  background-color: #009688;\n  z-index: 2;\n  pointer-events: none;\n  font-family: \'Roboto\', Arial, sans-serif;\n  font-size: 26px;\n}\n.hexagon[data-value="2"] .hexagon_inner {\n  background-color: #43a047;\n}\n.hexagon[data-value="4"] .hexagon_inner {\n  background-color: #4caf50;\n}\n.hexagon[data-value="8"] .hexagon_inner {\n  background-color: #66bb6a;\n}\n.hexagon[data-value="16"] .hexagon_inner {\n  background-color: #7cb342;\n}\n.hexagon[data-value="32"] .hexagon_inner {\n  background-color: #8bc34a;\n}\n.hexagon[data-value="64"] .hexagon_inner {\n  background-color: #9ccc65;\n}\n.hexagon[data-value="128"] .hexagon_inner {\n  background-color: #c0ca33;\n}\n.hexagon[data-value="256"] .hexagon_inner {\n  background-color: #cddc39;\n}\n.hexagon[data-value="512"] .hexagon_inner {\n  background-color: #d4e157;\n}\n.hexagon[data-value="1024"] .hexagon_inner {\n  background-color: #fdd835;\n}\n.hexagon[data-value="2048"] .hexagon_inner {\n  background-color: #ffeb3b;\n}\n.hexagon[data-value="4096"] .hexagon_inner {\n  background-color: #ffee58;\n}\n.hexagon[data-value="8192"] .hexagon_inner {\n  background-color: #ffb300;\n}\n.hexagon[data-value="16384"] .hexagon_inner {\n  background-color: #ffc107;\n}\n.hexagon[data-value="32768"] .hexagon_inner {\n  background-color: #ffca28;\n}\n.hexagon[data-value="56536"] .hexagon_inner {\n  background-color: #fb8c00;\n}\n.hexagon[data-value="131072"] .hexagon_inner {\n  background-color: #ff5722;\n}\n.hexagon[data-value="262144"] .hexagon_inner {\n  background-color: #f4511e;\n}\n.field {\n  position: relative;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n}\n.field__column {\n  height: 100%;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n}\n#url-server,\n#status,\n#countSelector {\n  position: absolute;\n  top: 10%;\n  left: 10%;\n  font-family: \'Roboto\', Arial, sans-serif;\n  font-size: 16px;\n  padding: 0.5em 1em;\n}\n#url-server {\n  top: 10%;\n}\n#countSelector {\n  top: calc(10% + 50px);\n  padding: 0;\n}\n#countSelector input {\n  display: block;\n}\n#status {\n  top: 90%;\n}\n',"",{version:3,sources:["webpack://./src/styles.less"],names:[],mappings:"AAEA;EACE,SAAA;EACA,UAAA;EACA,yBAAA;EACA,aAAA;EACA,aAAA;EACA,uBAAA;EACA,mBAAA;AADF;AAIA;EACE,kBAAA;AAFF;AAIE;;EAEE,WAAA;EACA,kBAAA;EACA,WAAA;EACA,QAAA;EACA,UAAA;EACA,SAAA;EACA,WAAA;EACA,mBAAA;EACA,yBAAA;AAFJ;AAKE;EACE,WAAA;EACA,+DAAA;AAHJ;AAME;EACE,UAAA;EACA,gEAAA;AAJJ;AAOE;EACE,mBAAA;AALJ;AAOI;EACE,yBAAA;AALN;AASE;EACE,kBAAA;EACA,SAAA;EACA,QAAA;EACA,WAAA;EACA,YAAA;EACA,aAAA;EACA,uBAAA;EACA,mBAAA;EACA,4CAAA;EACA,yBAAA;EACA,UAAA;EACA,oBAAA;EACA,wCAAA;EACA,eAAA;AAPJ;AAUE;EACE,yBAAA;AARJ;AAWE;EACE,yBAAA;AATJ;AAYE;EACE,yBAAA;AAVJ;AAaE;EACE,yBAAA;AAXJ;AAcE;EACE,yBAAA;AAZJ;AAeE;EACE,yBAAA;AAbJ;AAgBE;EACE,yBAAA;AAdJ;AAiBE;EACE,yBAAA;AAfJ;AAkBE;EACE,yBAAA;AAhBJ;AAmBE;EACE,yBAAA;AAjBJ;AAoBE;EACE,yBAAA;AAlBJ;AAqBE;EACE,yBAAA;AAnBJ;AAsBE;EACE,yBAAA;AApBJ;AAuBE;EACE,yBAAA;AArBJ;AAwBE;EACE,yBAAA;AAtBJ;AAyBE;EACE,yBAAA;AAvBJ;AA0BE;EACE,yBAAA;AAxBJ;AA2BE;EACE,yBAAA;AAzBJ;AA6BA;EACE,kBAAA;EACA,aAAA;EACA,uBAAA;EACA,mBAAA;AA3BF;AA6BE;EACE,YAAA;EACA,aAAA;EACA,sBAAA;EACA,uBAAA;EACA,mBAAA;AA3BJ;AAgCA;;;EAGE,kBAAA;EACA,QAAA;EACA,SAAA;EACA,wCAAA;EACA,eAAA;EACA,kBAAA;AA9BF;AAiCA;EACE,QAAA;AA/BF;AAkCA;EACE,qBAAA;EACA,UAAA;AAhCF;AA8BA;EAKI,cAAA;AAhCJ;AAoCA;EACE,QAAA;AAlCF",sourcesContent:['@bgColor: #80cbc4;\n\nbody {\n  margin: 0;\n  padding: 0;\n  background-color: @bgColor;\n  height: 100vh;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n}\n\n.hexagon {\n  position: relative;\n\n  &::before,\n  &::after {\n    content: \'\';\n    position: absolute;\n    right: 100%;\n    top: 50%;\n    width: 50%;\n    height: 0;\n    z-index: -1;\n    padding-bottom: 50%;\n    background-color: inherit;\n  }\n\n  &::before {\n    right: 100%;\n    transform: translate(50%,-50%) scale(1.42, 2.45) rotate(45deg);\n  }\n\n  &::after {\n    left: 100%;\n    transform: translate(-50%,-50%) scale(1.42, 2.45) rotate(45deg);\n  }\n\n  &_outer {\n    background: #00675b;\n\n    &:hover {\n      background-color: #64d8cb;\n    }\n  }\n\n  &_inner {\n    position: absolute;\n    left: 50%;\n    top: 50%;\n    width: 100%;\n    height: 100%;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    transform: translate(-50%, -50%) scale(.95);\n    background-color: #009688;\n    z-index: 2;\n    pointer-events: none;\n    font-family: \'Roboto\', Arial, sans-serif;\n    font-size: 26px;\n  }\n  \n  &[data-value="2"] &_inner {\n    background-color: #43a047;\n  }\n\n  &[data-value="4"] &_inner {\n    background-color: #4caf50;\n  }\n\n  &[data-value="8"] &_inner {\n    background-color: #66bb6a;\n  }\n\n  &[data-value="16"] &_inner {\n    background-color: #7cb342;\n  }\n\n  &[data-value="32"] &_inner {\n    background-color: #8bc34a;\n  }\n\n  &[data-value="64"] &_inner {\n    background-color: #9ccc65;\n  }\n\n  &[data-value="128"] &_inner {\n    background-color: #c0ca33;\n  }\n\n  &[data-value="256"] &_inner {\n    background-color: #cddc39;\n  }\n\n  &[data-value="512"] &_inner {\n    background-color: #d4e157;\n  }\n\n  &[data-value="1024"] &_inner {\n    background-color: #fdd835;\n  }\n\n  &[data-value="2048"] &_inner {\n    background-color: #ffeb3b;\n  }\n\n  &[data-value="4096"] &_inner {\n    background-color: #ffee58;\n  }\n\n  &[data-value="8192"] &_inner {\n    background-color: #ffb300;\n  }\n\n  &[data-value="16384"] &_inner {\n    background-color: #ffc107;\n  }\n\n  &[data-value="32768"] &_inner {\n    background-color: #ffca28;\n  }\n\n  &[data-value="56536"] &_inner {\n    background-color: #fb8c00;\n  }\n\n  &[data-value="131072"] &_inner {\n    background-color: #ff5722;\n  }\n\n  &[data-value="262144"] &_inner {\n    background-color: #f4511e;\n  }\n}\n\n.field {\n  position: relative;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n\n  &__column {\n    height: 100%;\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    align-items: center;\n  }\n}\n\n\n#url-server,\n#status,\n#countSelector {\n  position: absolute;\n  top: 10%;\n  left: 10%;\n  font-family: \'Roboto\', Arial, sans-serif;\n  font-size: 16px;\n  padding: .5em 1em;\n}\n\n#url-server {\n  top: 10%;\n}\n\n#countSelector {\n  top: calc(10% + 50px);\n  padding: 0;\n\n  input {\n    display: block;\n  }\n}\n\n#status {\n  top: 90%;\n}'],sourceRoot:""}]);const s=i},645:e=>{e.exports=function(e){var n=[];return n.toString=function(){return this.map((function(n){var t=e(n);return n[2]?"@media ".concat(n[2]," {").concat(t,"}"):t})).join("")},n.i=function(e,t,o){"string"==typeof e&&(e=[[null,e,""]]);var a={};if(o)for(var r=0;r<this.length;r++){var i=this[r][0];null!=i&&(a[i]=!0)}for(var s=0;s<e.length;s++){var A=[].concat(e[s]);o&&a[A[0]]||(t&&(A[2]?A[2]="".concat(t," and ").concat(A[2]):A[2]=t),n.push(A))}},n}},15:e=>{function n(e,n){(null==n||n>e.length)&&(n=e.length);for(var t=0,o=new Array(n);t<n;t++)o[t]=e[t];return o}e.exports=function(e){var t,o,a=(o=4,function(e){if(Array.isArray(e))return e}(t=e)||function(e,n){if("undefined"!=typeof Symbol&&Symbol.iterator in Object(e)){var t=[],o=!0,a=!1,r=void 0;try{for(var i,s=e[Symbol.iterator]();!(o=(i=s.next()).done)&&(t.push(i.value),!n||t.length!==n);o=!0);}catch(e){a=!0,r=e}finally{try{o||null==s.return||s.return()}finally{if(a)throw r}}return t}}(t,o)||function(e,t){if(e){if("string"==typeof e)return n(e,t);var o=Object.prototype.toString.call(e).slice(8,-1);return"Object"===o&&e.constructor&&(o=e.constructor.name),"Map"===o||"Set"===o?Array.from(e):"Arguments"===o||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(o)?n(e,t):void 0}}(t,o)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),r=a[1],i=a[3];if("function"==typeof btoa){var s=btoa(unescape(encodeURIComponent(JSON.stringify(i)))),A="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(s),l="/*# ".concat(A," */"),c=i.sources.map((function(e){return"/*# sourceURL=".concat(i.sourceRoot||"").concat(e," */")}));return[r].concat(c).concat([l]).join("\n")}return[r].join("\n")}},379:(e,n,t)=>{var o,a=function(){var e={};return function(n){if(void 0===e[n]){var t=document.querySelector(n);if(window.HTMLIFrameElement&&t instanceof window.HTMLIFrameElement)try{t=t.contentDocument.head}catch(e){t=null}e[n]=t}return e[n]}}(),r=[];function i(e){for(var n=-1,t=0;t<r.length;t++)if(r[t].identifier===e){n=t;break}return n}function s(e,n){for(var t={},o=[],a=0;a<e.length;a++){var s=e[a],A=n.base?s[0]+n.base:s[0],l=t[A]||0,c="".concat(A," ").concat(l);t[A]=l+1;var u=i(c),d={css:s[1],media:s[2],sourceMap:s[3]};-1!==u?(r[u].references++,r[u].updater(d)):r.push({identifier:c,updater:f(d,n),references:1}),o.push(c)}return o}function A(e){var n=document.createElement("style"),o=e.attributes||{};if(void 0===o.nonce){var r=t.nc;r&&(o.nonce=r)}if(Object.keys(o).forEach((function(e){n.setAttribute(e,o[e])})),"function"==typeof e.insert)e.insert(n);else{var i=a(e.insert||"head");if(!i)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");i.appendChild(n)}return n}var l,c=(l=[],function(e,n){return l[e]=n,l.filter(Boolean).join("\n")});function u(e,n,t,o){var a=t?"":o.media?"@media ".concat(o.media," {").concat(o.css,"}"):o.css;if(e.styleSheet)e.styleSheet.cssText=c(n,a);else{var r=document.createTextNode(a),i=e.childNodes;i[n]&&e.removeChild(i[n]),i.length?e.insertBefore(r,i[n]):e.appendChild(r)}}function d(e,n,t){var o=t.css,a=t.media,r=t.sourceMap;if(a?e.setAttribute("media",a):e.removeAttribute("media"),r&&"undefined"!=typeof btoa&&(o+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(r))))," */")),e.styleSheet)e.styleSheet.cssText=o;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(o))}}var h=null,g=0;function f(e,n){var t,o,a;if(n.singleton){var r=g++;t=h||(h=A(n)),o=u.bind(null,t,r,!1),a=u.bind(null,t,r,!0)}else t=A(n),o=d.bind(null,t,n),a=function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(t)};return o(e),function(n){if(n){if(n.css===e.css&&n.media===e.media&&n.sourceMap===e.sourceMap)return;o(e=n)}else a()}}e.exports=function(e,n){(n=n||{}).singleton||"boolean"==typeof n.singleton||(n.singleton=(void 0===o&&(o=Boolean(window&&document&&document.all&&!window.atob)),o));var t=s(e=e||[],n);return function(e){if(e=e||[],"[object Array]"===Object.prototype.toString.call(e)){for(var o=0;o<t.length;o++){var a=i(t[o]);r[a].references--}for(var A=s(e,n),l=0;l<t.length;l++){var c=i(t[l]);0===r[c].references&&(r[c].updater(),r.splice(c,1))}t=A}}}}},n={};function t(o){var a=n[o];if(void 0!==a)return a.exports;var r=n[o]={id:o,exports:{}};return e[o](r,r.exports,t),r.exports}t.n=e=>{var n=e&&e.__esModule?()=>e.default:()=>e;return t.d(n,{a:n}),n},t.d=(e,n)=>{for(var o in n)t.o(n,o)&&!t.o(e,o)&&Object.defineProperty(e,o,{enumerable:!0,get:n[o]})},t.o=(e,n)=>Object.prototype.hasOwnProperty.call(e,n),(()=>{var e=t(379),n=t.n(e),o=t(348);n()(o.Z,{insert:"head",singleton:!1}),o.Z.locals;class a{constructor({radius:e,coordinates:n}){this.radius=e,this.coordinates=n,this._neighbours={},this._value=0,this.oldValue=0,this.numbersToUse=[]}get neighbours(){return this._neighbours}set neighbours(e){this._neighbours=e}get value(){return this._value}set value(e){this._value=e,this.drawText(e||"")}drawCoordinates(){this.$innerEl.innerText=`[${this.coordinates.x}:${this.coordinates.y}:${this.coordinates.z}]`}drawText(e){this.$innerEl.innerText=e}render(){return this.$el=document.createElement("div"),this.$el.classList.add("hexagon"),this.$el.classList.add("hexagon_outer"),this.$el.hexagon=this,this.$el.innerHTML='<div class="hexagon hexagon_inner"></div>',this.$el.dataset.x=this.coordinates.x,this.$el.dataset.y=this.coordinates.y,this.$el.dataset.z=this.coordinates.z,this.$el.dataset.value=0,this.$innerEl=this.$el.children[0],this.$el}}const r="north",i="north-east",s="north-west",A="south",l="south-east",c="south-west";function u(e,n){return!!e[n]}const d=document.getElementById("field");let h=document.getElementById("url-server").value,g={};const f=new class{constructor(){this.events={},document.addEventListener("keydown",this.onKeyDownTaskManager.bind(this))}onKeyDownTaskManager(e){this.events[e.code]&&this.events[e.code]()}onKeyDown(e,n){this.events[e]=n}offKeyDown(e){this.events[e]=""}};let b=0;const v=document.getElementById("count-range"),E=document.querySelectorAll("[data-count-button]"),p=document.querySelector("[data-status]");if(window.location.hash)switch(window.location.hash){case"#test2":b=2;break;case"#test3":b=3;break;case"#test4":b=4}else b=2;v.value=b,g=new class{constructor(e,n,t){this.$el=e,this.reinit(n,t)}reinit(e,n){this.size=e,this.tableSize=2*e-1,this.radius=n,this.table={},this.allHexagons=[],this._bindEvents(),this._addStyles(),this.render()}_bindEvents(){this._onServerResponse=this._onServerResponse.bind(this),document.removeEventListener("serverResponse",this._onServerResponse),document.addEventListener("serverResponse",this._onServerResponse)}_onServerResponse(e){if(e.detail.forEach((e=>{const{x:n,y:t,z:o}=(a=e,{x:String(a.x),y:String(a.y),z:String(a.z)});var a;this.table[n][t][o].value=e.value,this.table[n][t][o].$el.dataset.value=e.value})),this.isGameOver()){const e=new CustomEvent("game:end",{});document.dispatchEvent(e)}}_cellExist({x:e,y:n,z:t}){return u(this.table,e)&&u(this.table[e],n)&&u(this.table[e][n],t)}_addCell({x:e,y:n,z:t}){u(this.table,e)||(this.table[e]={}),u(this.table[e],n)||(this.table[e][n]={}),u(this.table[e][n],t)||(this.table[e][n][t]="")}_saveCell(e,n){let{x:t,y:o,z:a}=n;this._cellExist(n)||this._addCell(n),this.table[t][o][a]=e}_getCell({x:e,y:n,z:t}){return this.table[e][n][t]}_findNeighbours(e){const{x:n,y:t,z:o}=function(e){return{x:Number(e.x),y:Number(e.y),z:Number(e.z)}}(e);return[{x:n+1,y:t-1,z:o,direction:l},{x:n-1,y:t+1,z:o,direction:s},{x:n,y:t+1,z:o-1,direction:r},{x:n,y:t-1,z:o+1,direction:A},{x:n+1,y:t,z:o-1,direction:i},{x:n-1,y:t,z:o+1,direction:c}].filter(this._cellExist.bind(this)).reduce(((e,n)=>(e[n.direction]=this._getCell(n),e)),{})}_updateNeighbours(e){this._getCell(e).neighbours=this._findNeighbours(e)}_calcHexSizes(){return this.innerRadius=Math.sqrt(3)/2*this.radius,{tallerSize:this.radius,widerSize:2*this.innerRadius}}_createColumnTemplate(e,n){const t=e=>n>0?e-this.size+1:e-n-this.size+1,o=this.radius,r=document.createElement("div");r.classList.add("field__column");for(let s=0;s<e;s++){const e={x:n,y:(i=s,-n-t(i)),z:t(s)},A=new a({radius:o,coordinates:e});r.append(A.render()),this._saveCell(A,e),this.allHexagons.push(A)}var i;return r}_addStyles(){const e=document.getElementById("field-styles"),n=this._calcHexSizes(),t=`.field__column {margin-left: ${this.radius/2}px;}.hexagon_outer {width: ${n.tallerSize}px;height: ${n.widerSize}px;}`;if(e)e.innerText=t;else{const e=document.createElement("style");e.id="field-styles",e.innerText=t,document.head.append(e)}}render(){this.$el.innerHTML="";for(let e=0;e<this.tableSize;e++){const n=this.tableSize-Math.abs(this.size-1-e);this.$el.append(this._createColumnTemplate(n,e-this.size+1))}}updateAllNeighbours(){for(let e in this.table){const n=this.table[e];for(let t in n){const o=n[t];for(let n in o)this._updateNeighbours({x:e,y:t,z:n})}}}_getMovementSource(e){const n=this.size-1,t={"north-west":{x:n,y:-n},north:{z:n,y:-n},"north-east":{x:-n,z:n},"south-west":{x:n,z:-n},south:{y:n,z:-n},"south-east":{x:-n,y:n}}[e];return this.allHexagons.filter((e=>{const n=e.coordinates,{x:o,y:a,z:r}=t;return!(!o||n.x!==o)||!(!a||n.y!==a)||!(!r||n.z!==r)}))}_getMovementDestination(e){const n=this.size-1,t={"north-west":{x:-n,y:n},north:{z:-n,y:n},"north-east":{x:n,z:-n},"south-west":{x:-n,z:n},south:{y:-n,z:n},"south-east":{x:n,y:-n}}[e];return this.allHexagons.filter((e=>{const n=e.coordinates,{x:o,y:a,z:r}=t;return!(!o||n.x!==o)||!(!a||n.y!==a)||!(!r||n.z!==r)}))}_getOpposizeDirection(e){return{"north-west":l,north:A,"north-east":c,"south-west":i,south:r,"south-east":s}[e]}makeStep(e){if(this.isMoving)return;this.isMoving=!0;const n=this._getMovementSource(e);let t=!1;return this.allHexagons.forEach((e=>{e.oldValue=e.value})),n.forEach((n=>{let t=n,o=t.neighbours[e];for(;t;){o=t.neighbours[e];const n=t.value,a=t.numbersToUse;if(n||a.length)o?(o.numbersToUse.push(...a),n&&o.numbersToUse.push(n),t.numbersToUse=[],t.value=0,t.$el.dataset.value=0):n&&t.numbersToUse.push(n),t=o;else if(t=o,!t)break}})),this._getMovementDestination(e).forEach((n=>{if(!n.numbersToUse.length)return;const t=n.numbersToUse.reverse().reduce(((e,n)=>(e[e.length-1]&&!e[e.length-1].summed&&e[e.length-1].number===n?(e[e.length-1].number=2*n,e[e.length-1].summed=!0):e.push({number:n,summed:!1}),e)),[]).map((e=>e.number));n.numbersToUse=[],n.calcuatedRow=t;const o=this._getOpposizeDirection(e);n.calcuatedRow.forEach(((e,t)=>{let a=n;for(let e=0;e<t;e++)a=a.neighbours[o];a&&(a.value=e,a.$el.dataset.value=e)})),n.calcuatedRow=[]})),this.allHexagons.forEach((e=>{e.oldValue!==e.value&&(t=!0)})),this.isMoving=!1,t}isGameOver(){let e=!0;return[s,r,i].forEach((n=>{const t=this._getMovementSource(n);let o="";t.forEach((t=>{let a=0,r=t,i=!1;do{a===r.value&&(e=!1),0===r.value&&(e=!1),a=r.value,r.neighbours[n]||(i=!0),o=r,r=r.neighbours[n]}while(!i)}))})),e}get dataToSend(){return JSON.stringify(this.allHexagons.filter((e=>e.value)).map((e=>({x:e.coordinates.x,y:e.coordinates.y,z:e.coordinates.z,value:e.value}))))}}(d,b,x(b));const m=new class{constructor(e,n){this.url=e,this.fieldSize=n}_onResponce(e){const n=new CustomEvent("serverResponse",{detail:e});document.dispatchEvent(n)}getData(e="[]"){fetch(`${this.url}/${this.fieldSize}`,{method:"post",body:e}).then((e=>e.json())).then(this._onResponce.bind(this))}setUrl(e){this.url=e}setFieldSize(e){this.fieldSize=e}}(h,b);function y(e){g.reinit(e,x(e)),g.updateAllNeighbours(),m.setFieldSize(e),m.getData(),p.dataset.status="playing",p.innerText="playing"}function x(e){const n=window.innerHeight,t=2*e-1;return console.log(n/t),Math.min(100,n/t/2)}f.onKeyDown("KeyQ",(()=>{g.makeStep("north-west")&&m.getData(g.dataToSend)})),f.onKeyDown("KeyW",(()=>{g.makeStep("north")&&m.getData(g.dataToSend)})),f.onKeyDown("KeyE",(()=>{g.makeStep("north-east")&&m.getData(g.dataToSend)})),f.onKeyDown("KeyA",(()=>{g.makeStep("south-west")&&m.getData(g.dataToSend)})),f.onKeyDown("KeyS",(()=>{g.makeStep("south")&&m.getData(g.dataToSend)})),f.onKeyDown("KeyD",(()=>{g.makeStep("south-east")&&m.getData(g.dataToSend)})),setTimeout((()=>{m.getData()}),200),g.updateAllNeighbours(),document.addEventListener("game:end",(()=>{console.log("game over"),document.querySelector("[data-status]").dataset.status="game-over",document.querySelector("[data-status]").innerText="game-over"})),document.getElementById("url-server").addEventListener("change",(e=>{m.setUrl(e.target.value)})),v.addEventListener("input",(e=>{y(e.target.value)})),E.forEach((e=>{e.addEventListener("click",(e=>{y(e.target.dataset.countButton)}))}))})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,